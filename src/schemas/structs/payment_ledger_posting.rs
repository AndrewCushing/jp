// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `payment_ledger_posting.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct LedgerPosting {
    // message fields
    pub ledger_request_posting_id: ::std::string::String,
    pub ledger_response_posting_id: ::std::string::String,
    pub transaction_posting_status: TransactionPostingStatus,
    pub failure_reason: FailureReason,
    pub batch_date: ::std::string::String,
    pub account_type: ::std::string::String,
    pub account_class: ::std::string::String,
    pub transaction_type: ::std::string::String,
    pub ledger_id: LedgerId,
    pub ledger_posting_sign: LedgerPostingSign,
    pub posting_code_text: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LedgerPosting {
    fn default() -> &'a LedgerPosting {
        <LedgerPosting as ::protobuf::Message>::default_instance()
    }
}

impl LedgerPosting {
    pub fn new() -> LedgerPosting {
        ::std::default::Default::default()
    }

    // string ledger_request_posting_id = 1;


    pub fn get_ledger_request_posting_id(&self) -> &str {
        &self.ledger_request_posting_id
    }
    pub fn clear_ledger_request_posting_id(&mut self) {
        self.ledger_request_posting_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_ledger_request_posting_id(&mut self, v: ::std::string::String) {
        self.ledger_request_posting_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ledger_request_posting_id(&mut self) -> &mut ::std::string::String {
        &mut self.ledger_request_posting_id
    }

    // Take field
    pub fn take_ledger_request_posting_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ledger_request_posting_id, ::std::string::String::new())
    }

    // string ledger_response_posting_id = 2;


    pub fn get_ledger_response_posting_id(&self) -> &str {
        &self.ledger_response_posting_id
    }
    pub fn clear_ledger_response_posting_id(&mut self) {
        self.ledger_response_posting_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_ledger_response_posting_id(&mut self, v: ::std::string::String) {
        self.ledger_response_posting_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ledger_response_posting_id(&mut self) -> &mut ::std::string::String {
        &mut self.ledger_response_posting_id
    }

    // Take field
    pub fn take_ledger_response_posting_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ledger_response_posting_id, ::std::string::String::new())
    }

    // .protobuf.payment.TransactionPostingStatus transaction_posting_status = 3;


    pub fn get_transaction_posting_status(&self) -> TransactionPostingStatus {
        self.transaction_posting_status
    }
    pub fn clear_transaction_posting_status(&mut self) {
        self.transaction_posting_status = TransactionPostingStatus::TransactionPostingStatus_NotSet;
    }

    // Param is passed by value, moved
    pub fn set_transaction_posting_status(&mut self, v: TransactionPostingStatus) {
        self.transaction_posting_status = v;
    }

    // .protobuf.payment.FailureReason failure_reason = 4;


    pub fn get_failure_reason(&self) -> FailureReason {
        self.failure_reason
    }
    pub fn clear_failure_reason(&mut self) {
        self.failure_reason = FailureReason::FailureReason_NotSet;
    }

    // Param is passed by value, moved
    pub fn set_failure_reason(&mut self, v: FailureReason) {
        self.failure_reason = v;
    }

    // string batch_date = 5;


    pub fn get_batch_date(&self) -> &str {
        &self.batch_date
    }
    pub fn clear_batch_date(&mut self) {
        self.batch_date.clear();
    }

    // Param is passed by value, moved
    pub fn set_batch_date(&mut self, v: ::std::string::String) {
        self.batch_date = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_batch_date(&mut self) -> &mut ::std::string::String {
        &mut self.batch_date
    }

    // Take field
    pub fn take_batch_date(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.batch_date, ::std::string::String::new())
    }

    // string account_type = 6;


    pub fn get_account_type(&self) -> &str {
        &self.account_type
    }
    pub fn clear_account_type(&mut self) {
        self.account_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_type(&mut self, v: ::std::string::String) {
        self.account_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_type(&mut self) -> &mut ::std::string::String {
        &mut self.account_type
    }

    // Take field
    pub fn take_account_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_type, ::std::string::String::new())
    }

    // string account_class = 7;


    pub fn get_account_class(&self) -> &str {
        &self.account_class
    }
    pub fn clear_account_class(&mut self) {
        self.account_class.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_class(&mut self, v: ::std::string::String) {
        self.account_class = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_class(&mut self) -> &mut ::std::string::String {
        &mut self.account_class
    }

    // Take field
    pub fn take_account_class(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_class, ::std::string::String::new())
    }

    // string transaction_type = 8;


    pub fn get_transaction_type(&self) -> &str {
        &self.transaction_type
    }
    pub fn clear_transaction_type(&mut self) {
        self.transaction_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_transaction_type(&mut self, v: ::std::string::String) {
        self.transaction_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_type(&mut self) -> &mut ::std::string::String {
        &mut self.transaction_type
    }

    // Take field
    pub fn take_transaction_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.transaction_type, ::std::string::String::new())
    }

    // .protobuf.payment.LedgerId ledger_id = 9;


    pub fn get_ledger_id(&self) -> LedgerId {
        self.ledger_id
    }
    pub fn clear_ledger_id(&mut self) {
        self.ledger_id = LedgerId::LedgerId_NotSet;
    }

    // Param is passed by value, moved
    pub fn set_ledger_id(&mut self, v: LedgerId) {
        self.ledger_id = v;
    }

    // .protobuf.payment.LedgerPostingSign ledger_posting_sign = 10;


    pub fn get_ledger_posting_sign(&self) -> LedgerPostingSign {
        self.ledger_posting_sign
    }
    pub fn clear_ledger_posting_sign(&mut self) {
        self.ledger_posting_sign = LedgerPostingSign::LedgerPostingSign_NotSet;
    }

    // Param is passed by value, moved
    pub fn set_ledger_posting_sign(&mut self, v: LedgerPostingSign) {
        self.ledger_posting_sign = v;
    }

    // string posting_code_text = 11;


    pub fn get_posting_code_text(&self) -> &str {
        &self.posting_code_text
    }
    pub fn clear_posting_code_text(&mut self) {
        self.posting_code_text.clear();
    }

    // Param is passed by value, moved
    pub fn set_posting_code_text(&mut self, v: ::std::string::String) {
        self.posting_code_text = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_posting_code_text(&mut self) -> &mut ::std::string::String {
        &mut self.posting_code_text
    }

    // Take field
    pub fn take_posting_code_text(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.posting_code_text, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LedgerPosting {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ledger_request_posting_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ledger_response_posting_id)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.transaction_posting_status, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.failure_reason, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.batch_date)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_type)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_class)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.transaction_type)?;
                },
                9 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.ledger_id, 9, &mut self.unknown_fields)?
                },
                10 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.ledger_posting_sign, 10, &mut self.unknown_fields)?
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.posting_code_text)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.ledger_request_posting_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.ledger_request_posting_id);
        }
        if !self.ledger_response_posting_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.ledger_response_posting_id);
        }
        if self.transaction_posting_status != TransactionPostingStatus::TransactionPostingStatus_NotSet {
            my_size += ::protobuf::rt::enum_size(3, self.transaction_posting_status);
        }
        if self.failure_reason != FailureReason::FailureReason_NotSet {
            my_size += ::protobuf::rt::enum_size(4, self.failure_reason);
        }
        if !self.batch_date.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.batch_date);
        }
        if !self.account_type.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.account_type);
        }
        if !self.account_class.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.account_class);
        }
        if !self.transaction_type.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.transaction_type);
        }
        if self.ledger_id != LedgerId::LedgerId_NotSet {
            my_size += ::protobuf::rt::enum_size(9, self.ledger_id);
        }
        if self.ledger_posting_sign != LedgerPostingSign::LedgerPostingSign_NotSet {
            my_size += ::protobuf::rt::enum_size(10, self.ledger_posting_sign);
        }
        if !self.posting_code_text.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.posting_code_text);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.ledger_request_posting_id.is_empty() {
            os.write_string(1, &self.ledger_request_posting_id)?;
        }
        if !self.ledger_response_posting_id.is_empty() {
            os.write_string(2, &self.ledger_response_posting_id)?;
        }
        if self.transaction_posting_status != TransactionPostingStatus::TransactionPostingStatus_NotSet {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.transaction_posting_status))?;
        }
        if self.failure_reason != FailureReason::FailureReason_NotSet {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.failure_reason))?;
        }
        if !self.batch_date.is_empty() {
            os.write_string(5, &self.batch_date)?;
        }
        if !self.account_type.is_empty() {
            os.write_string(6, &self.account_type)?;
        }
        if !self.account_class.is_empty() {
            os.write_string(7, &self.account_class)?;
        }
        if !self.transaction_type.is_empty() {
            os.write_string(8, &self.transaction_type)?;
        }
        if self.ledger_id != LedgerId::LedgerId_NotSet {
            os.write_enum(9, ::protobuf::ProtobufEnum::value(&self.ledger_id))?;
        }
        if self.ledger_posting_sign != LedgerPostingSign::LedgerPostingSign_NotSet {
            os.write_enum(10, ::protobuf::ProtobufEnum::value(&self.ledger_posting_sign))?;
        }
        if !self.posting_code_text.is_empty() {
            os.write_string(11, &self.posting_code_text)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LedgerPosting {
        LedgerPosting::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ledger_request_posting_id",
                |m: &LedgerPosting| { &m.ledger_request_posting_id },
                |m: &mut LedgerPosting| { &mut m.ledger_request_posting_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ledger_response_posting_id",
                |m: &LedgerPosting| { &m.ledger_response_posting_id },
                |m: &mut LedgerPosting| { &mut m.ledger_response_posting_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TransactionPostingStatus>>(
                "transaction_posting_status",
                |m: &LedgerPosting| { &m.transaction_posting_status },
                |m: &mut LedgerPosting| { &mut m.transaction_posting_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FailureReason>>(
                "failure_reason",
                |m: &LedgerPosting| { &m.failure_reason },
                |m: &mut LedgerPosting| { &mut m.failure_reason },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "batch_date",
                |m: &LedgerPosting| { &m.batch_date },
                |m: &mut LedgerPosting| { &mut m.batch_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_type",
                |m: &LedgerPosting| { &m.account_type },
                |m: &mut LedgerPosting| { &mut m.account_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_class",
                |m: &LedgerPosting| { &m.account_class },
                |m: &mut LedgerPosting| { &mut m.account_class },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "transaction_type",
                |m: &LedgerPosting| { &m.transaction_type },
                |m: &mut LedgerPosting| { &mut m.transaction_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<LedgerId>>(
                "ledger_id",
                |m: &LedgerPosting| { &m.ledger_id },
                |m: &mut LedgerPosting| { &mut m.ledger_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<LedgerPostingSign>>(
                "ledger_posting_sign",
                |m: &LedgerPosting| { &m.ledger_posting_sign },
                |m: &mut LedgerPosting| { &mut m.ledger_posting_sign },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "posting_code_text",
                |m: &LedgerPosting| { &m.posting_code_text },
                |m: &mut LedgerPosting| { &mut m.posting_code_text },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LedgerPosting>(
                "LedgerPosting",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LedgerPosting {
        static instance: ::protobuf::rt::LazyV2<LedgerPosting> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LedgerPosting::new)
    }
}

impl ::protobuf::Clear for LedgerPosting {
    fn clear(&mut self) {
        self.ledger_request_posting_id.clear();
        self.ledger_response_posting_id.clear();
        self.transaction_posting_status = TransactionPostingStatus::TransactionPostingStatus_NotSet;
        self.failure_reason = FailureReason::FailureReason_NotSet;
        self.batch_date.clear();
        self.account_type.clear();
        self.account_class.clear();
        self.transaction_type.clear();
        self.ledger_id = LedgerId::LedgerId_NotSet;
        self.ledger_posting_sign = LedgerPostingSign::LedgerPostingSign_NotSet;
        self.posting_code_text.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LedgerPosting {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LedgerPosting {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TransactionPostingStatus {
    TransactionPostingStatus_NotSet = 0,
    Success = 1,
    Fail = 2,
}

impl ::protobuf::ProtobufEnum for TransactionPostingStatus {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TransactionPostingStatus> {
        match value {
            0 => ::std::option::Option::Some(TransactionPostingStatus::TransactionPostingStatus_NotSet),
            1 => ::std::option::Option::Some(TransactionPostingStatus::Success),
            2 => ::std::option::Option::Some(TransactionPostingStatus::Fail),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TransactionPostingStatus] = &[
            TransactionPostingStatus::TransactionPostingStatus_NotSet,
            TransactionPostingStatus::Success,
            TransactionPostingStatus::Fail,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TransactionPostingStatus>("TransactionPostingStatus", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TransactionPostingStatus {
}

impl ::std::default::Default for TransactionPostingStatus {
    fn default() -> Self {
        TransactionPostingStatus::TransactionPostingStatus_NotSet
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionPostingStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum FailureReason {
    FailureReason_NotSet = 0,
    InvalidAccount = 1,
    AccountClosed = 2,
    AccountStopped = 3,
    AccountHolderDeceased = 4,
    PostingDateBeforeAccountOpeningDate = 5,
    PostingDateAfterAccountClosedDate = 6,
}

impl ::protobuf::ProtobufEnum for FailureReason {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FailureReason> {
        match value {
            0 => ::std::option::Option::Some(FailureReason::FailureReason_NotSet),
            1 => ::std::option::Option::Some(FailureReason::InvalidAccount),
            2 => ::std::option::Option::Some(FailureReason::AccountClosed),
            3 => ::std::option::Option::Some(FailureReason::AccountStopped),
            4 => ::std::option::Option::Some(FailureReason::AccountHolderDeceased),
            5 => ::std::option::Option::Some(FailureReason::PostingDateBeforeAccountOpeningDate),
            6 => ::std::option::Option::Some(FailureReason::PostingDateAfterAccountClosedDate),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FailureReason] = &[
            FailureReason::FailureReason_NotSet,
            FailureReason::InvalidAccount,
            FailureReason::AccountClosed,
            FailureReason::AccountStopped,
            FailureReason::AccountHolderDeceased,
            FailureReason::PostingDateBeforeAccountOpeningDate,
            FailureReason::PostingDateAfterAccountClosedDate,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<FailureReason>("FailureReason", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for FailureReason {
}

impl ::std::default::Default for FailureReason {
    fn default() -> Self {
        FailureReason::FailureReason_NotSet
    }
}

impl ::protobuf::reflect::ProtobufValue for FailureReason {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum LedgerId {
    LedgerId_NotSet = 0,
    BankingSavingsUnisys = 1,
    MortgageInsuranceNBSFujitsu = 2,
    MortgageInsuranceUCBFujitsu = 3,
    PersonalLoanRBS = 4,
    NWTrustAS400 = 5,
    CreditCardTSYS = 6,
    FasterPayment = 7,
    BankRec = 8,
    BankRecByCorporateCheque = 9,
    BankingSavingsSap = 10,
    CAndCC = 11,
    BACS = 12,
    PDAndAMarkI = 13,
    PDAndAMarkII = 14,
    CommercialELS = 15,
}

impl ::protobuf::ProtobufEnum for LedgerId {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LedgerId> {
        match value {
            0 => ::std::option::Option::Some(LedgerId::LedgerId_NotSet),
            1 => ::std::option::Option::Some(LedgerId::BankingSavingsUnisys),
            2 => ::std::option::Option::Some(LedgerId::MortgageInsuranceNBSFujitsu),
            3 => ::std::option::Option::Some(LedgerId::MortgageInsuranceUCBFujitsu),
            4 => ::std::option::Option::Some(LedgerId::PersonalLoanRBS),
            5 => ::std::option::Option::Some(LedgerId::NWTrustAS400),
            6 => ::std::option::Option::Some(LedgerId::CreditCardTSYS),
            7 => ::std::option::Option::Some(LedgerId::FasterPayment),
            8 => ::std::option::Option::Some(LedgerId::BankRec),
            9 => ::std::option::Option::Some(LedgerId::BankRecByCorporateCheque),
            10 => ::std::option::Option::Some(LedgerId::BankingSavingsSap),
            11 => ::std::option::Option::Some(LedgerId::CAndCC),
            12 => ::std::option::Option::Some(LedgerId::BACS),
            13 => ::std::option::Option::Some(LedgerId::PDAndAMarkI),
            14 => ::std::option::Option::Some(LedgerId::PDAndAMarkII),
            15 => ::std::option::Option::Some(LedgerId::CommercialELS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [LedgerId] = &[
            LedgerId::LedgerId_NotSet,
            LedgerId::BankingSavingsUnisys,
            LedgerId::MortgageInsuranceNBSFujitsu,
            LedgerId::MortgageInsuranceUCBFujitsu,
            LedgerId::PersonalLoanRBS,
            LedgerId::NWTrustAS400,
            LedgerId::CreditCardTSYS,
            LedgerId::FasterPayment,
            LedgerId::BankRec,
            LedgerId::BankRecByCorporateCheque,
            LedgerId::BankingSavingsSap,
            LedgerId::CAndCC,
            LedgerId::BACS,
            LedgerId::PDAndAMarkI,
            LedgerId::PDAndAMarkII,
            LedgerId::CommercialELS,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<LedgerId>("LedgerId", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for LedgerId {
}

impl ::std::default::Default for LedgerId {
    fn default() -> Self {
        LedgerId::LedgerId_NotSet
    }
}

impl ::protobuf::reflect::ProtobufValue for LedgerId {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum LedgerPostingSign {
    LedgerPostingSign_NotSet = 0,
    Debit = 1,
    Credit = 2,
}

impl ::protobuf::ProtobufEnum for LedgerPostingSign {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LedgerPostingSign> {
        match value {
            0 => ::std::option::Option::Some(LedgerPostingSign::LedgerPostingSign_NotSet),
            1 => ::std::option::Option::Some(LedgerPostingSign::Debit),
            2 => ::std::option::Option::Some(LedgerPostingSign::Credit),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [LedgerPostingSign] = &[
            LedgerPostingSign::LedgerPostingSign_NotSet,
            LedgerPostingSign::Debit,
            LedgerPostingSign::Credit,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<LedgerPostingSign>("LedgerPostingSign", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for LedgerPostingSign {
}

impl ::std::default::Default for LedgerPostingSign {
    fn default() -> Self {
        LedgerPostingSign::LedgerPostingSign_NotSet
    }
}

impl ::protobuf::reflect::ProtobufValue for LedgerPostingSign {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cpayment_ledger_posting.proto\x12\x10protobuf.payment\"\x85\x05\n\r\
    LedgerPosting\x129\n\x19ledger_request_posting_id\x18\x01\x20\x01(\tR\
    \x16ledgerRequestPostingId\x12;\n\x1aledger_response_posting_id\x18\x02\
    \x20\x01(\tR\x17ledgerResponsePostingId\x12h\n\x1atransaction_posting_st\
    atus\x18\x03\x20\x01(\x0e2*.protobuf.payment.TransactionPostingStatusR\
    \x18transactionPostingStatus\x12F\n\x0efailure_reason\x18\x04\x20\x01(\
    \x0e2\x1f.protobuf.payment.FailureReasonR\rfailureReason\x12\x1d\n\nbatc\
    h_date\x18\x05\x20\x01(\tR\tbatchDate\x12!\n\x0caccount_type\x18\x06\x20\
    \x01(\tR\x0baccountType\x12#\n\raccount_class\x18\x07\x20\x01(\tR\x0cacc\
    ountClass\x12)\n\x10transaction_type\x18\x08\x20\x01(\tR\x0ftransactionT\
    ype\x127\n\tledger_id\x18\t\x20\x01(\x0e2\x1a.protobuf.payment.LedgerIdR\
    \x08ledgerId\x12S\n\x13ledger_posting_sign\x18\n\x20\x01(\x0e2#.protobuf\
    .payment.LedgerPostingSignR\x11ledgerPostingSign\x12*\n\x11posting_code_\
    text\x18\x0b\x20\x01(\tR\x0fpostingCodeText*V\n\x18TransactionPostingSta\
    tus\x12#\n\x1fTransactionPostingStatus_NotSet\x10\0\x12\x0b\n\x07Success\
    \x10\x01\x12\x08\n\x04Fail\x10\x02*\xcf\x01\n\rFailureReason\x12\x18\n\
    \x14FailureReason_NotSet\x10\0\x12\x12\n\x0eInvalidAccount\x10\x01\x12\
    \x11\n\rAccountClosed\x10\x02\x12\x12\n\x0eAccountStopped\x10\x03\x12\
    \x19\n\x15AccountHolderDeceased\x10\x04\x12'\n#PostingDateBeforeAccountO\
    peningDate\x10\x05\x12%\n!PostingDateAfterAccountClosedDate\x10\x06*\xd7\
    \x02\n\x08LedgerId\x12\x13\n\x0fLedgerId_NotSet\x10\0\x12\x18\n\x14Banki\
    ngSavingsUnisys\x10\x01\x12\x1f\n\x1bMortgageInsuranceNBSFujitsu\x10\x02\
    \x12\x1f\n\x1bMortgageInsuranceUCBFujitsu\x10\x03\x12\x13\n\x0fPersonalL\
    oanRBS\x10\x04\x12\x10\n\x0cNWTrustAS400\x10\x05\x12\x12\n\x0eCreditCard\
    TSYS\x10\x06\x12\x11\n\rFasterPayment\x10\x07\x12\x0b\n\x07BankRec\x10\
    \x08\x12\x1c\n\x18BankRecByCorporateCheque\x10\t\x12\x15\n\x11BankingSav\
    ingsSap\x10\n\x12\n\n\x06CAndCC\x10\x0b\x12\x08\n\x04BACS\x10\x0c\x12\
    \x0f\n\x0bPDAndAMarkI\x10\r\x12\x10\n\x0cPDAndAMarkII\x10\x0e\x12\x11\n\
    \rCommercialELS\x10\x0f*H\n\x11LedgerPostingSign\x12\x1c\n\x18LedgerPost\
    ingSign_NotSet\x10\0\x12\t\n\x05Debit\x10\x01\x12\n\n\x06Credit\x10\x02B\
    E\n-uk.co.nationwide.payments.schema.payment.bodyB\x14PaymentLedgerPosti\
    ngb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
