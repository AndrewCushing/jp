// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `payment_form3_data.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Form3Data {
    // message fields
    pub source_id: ::std::string::String,
    pub organisation_id: ::std::string::String,
    pub payment_admission: ::protobuf::SingularPtrField<Form3Data_PaymentAdmissionType>,
    pub payment: ::protobuf::SingularPtrField<Form3Data_PaymentType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Form3Data {
    fn default() -> &'a Form3Data {
        <Form3Data as ::protobuf::Message>::default_instance()
    }
}

impl Form3Data {
    pub fn new() -> Form3Data {
        ::std::default::Default::default()
    }

    // string source_id = 1;


    pub fn get_source_id(&self) -> &str {
        &self.source_id
    }
    pub fn clear_source_id(&mut self) {
        self.source_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_source_id(&mut self, v: ::std::string::String) {
        self.source_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_id(&mut self) -> &mut ::std::string::String {
        &mut self.source_id
    }

    // Take field
    pub fn take_source_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.source_id, ::std::string::String::new())
    }

    // string organisation_id = 2;


    pub fn get_organisation_id(&self) -> &str {
        &self.organisation_id
    }
    pub fn clear_organisation_id(&mut self) {
        self.organisation_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_organisation_id(&mut self, v: ::std::string::String) {
        self.organisation_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_organisation_id(&mut self) -> &mut ::std::string::String {
        &mut self.organisation_id
    }

    // Take field
    pub fn take_organisation_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.organisation_id, ::std::string::String::new())
    }

    // .protobuf.payment.Form3Data.PaymentAdmissionType payment_admission = 3;


    pub fn get_payment_admission(&self) -> &Form3Data_PaymentAdmissionType {
        self.payment_admission.as_ref().unwrap_or_else(|| <Form3Data_PaymentAdmissionType as ::protobuf::Message>::default_instance())
    }
    pub fn clear_payment_admission(&mut self) {
        self.payment_admission.clear();
    }

    pub fn has_payment_admission(&self) -> bool {
        self.payment_admission.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payment_admission(&mut self, v: Form3Data_PaymentAdmissionType) {
        self.payment_admission = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payment_admission(&mut self) -> &mut Form3Data_PaymentAdmissionType {
        if self.payment_admission.is_none() {
            self.payment_admission.set_default();
        }
        self.payment_admission.as_mut().unwrap()
    }

    // Take field
    pub fn take_payment_admission(&mut self) -> Form3Data_PaymentAdmissionType {
        self.payment_admission.take().unwrap_or_else(|| Form3Data_PaymentAdmissionType::new())
    }

    // .protobuf.payment.Form3Data.PaymentType payment = 4;


    pub fn get_payment(&self) -> &Form3Data_PaymentType {
        self.payment.as_ref().unwrap_or_else(|| <Form3Data_PaymentType as ::protobuf::Message>::default_instance())
    }
    pub fn clear_payment(&mut self) {
        self.payment.clear();
    }

    pub fn has_payment(&self) -> bool {
        self.payment.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payment(&mut self, v: Form3Data_PaymentType) {
        self.payment = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payment(&mut self) -> &mut Form3Data_PaymentType {
        if self.payment.is_none() {
            self.payment.set_default();
        }
        self.payment.as_mut().unwrap()
    }

    // Take field
    pub fn take_payment(&mut self) -> Form3Data_PaymentType {
        self.payment.take().unwrap_or_else(|| Form3Data_PaymentType::new())
    }
}

impl ::protobuf::Message for Form3Data {
    fn is_initialized(&self) -> bool {
        for v in &self.payment_admission {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.payment {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.source_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.organisation_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.payment_admission)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.payment)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.source_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.source_id);
        }
        if !self.organisation_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.organisation_id);
        }
        if let Some(ref v) = self.payment_admission.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.payment.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.source_id.is_empty() {
            os.write_string(1, &self.source_id)?;
        }
        if !self.organisation_id.is_empty() {
            os.write_string(2, &self.organisation_id)?;
        }
        if let Some(ref v) = self.payment_admission.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.payment.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Form3Data {
        Form3Data::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "source_id",
                |m: &Form3Data| { &m.source_id },
                |m: &mut Form3Data| { &mut m.source_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "organisation_id",
                |m: &Form3Data| { &m.organisation_id },
                |m: &mut Form3Data| { &mut m.organisation_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Form3Data_PaymentAdmissionType>>(
                "payment_admission",
                |m: &Form3Data| { &m.payment_admission },
                |m: &mut Form3Data| { &mut m.payment_admission },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Form3Data_PaymentType>>(
                "payment",
                |m: &Form3Data| { &m.payment },
                |m: &mut Form3Data| { &mut m.payment },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Form3Data>(
                "Form3Data",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Form3Data {
        static instance: ::protobuf::rt::LazyV2<Form3Data> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Form3Data::new)
    }
}

impl ::protobuf::Clear for Form3Data {
    fn clear(&mut self) {
        self.source_id.clear();
        self.organisation_id.clear();
        self.payment_admission.clear();
        self.payment.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Form3Data {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Form3Data {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Form3Data_PaymentAdmissionType {
    // message fields
    pub id: ::std::string::String,
    pub version: ::std::string::String,
    pub creation_date_time: ::std::string::String,
    pub modified_date_time: ::std::string::String,
    pub admission_date_time: ::std::string::String,
    pub status: Status,
    pub status_reason: StatusReason,
    pub scheme_status_code: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Form3Data_PaymentAdmissionType {
    fn default() -> &'a Form3Data_PaymentAdmissionType {
        <Form3Data_PaymentAdmissionType as ::protobuf::Message>::default_instance()
    }
}

impl Form3Data_PaymentAdmissionType {
    pub fn new() -> Form3Data_PaymentAdmissionType {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string version = 2;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // string creation_date_time = 3;


    pub fn get_creation_date_time(&self) -> &str {
        &self.creation_date_time
    }
    pub fn clear_creation_date_time(&mut self) {
        self.creation_date_time.clear();
    }

    // Param is passed by value, moved
    pub fn set_creation_date_time(&mut self, v: ::std::string::String) {
        self.creation_date_time = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_creation_date_time(&mut self) -> &mut ::std::string::String {
        &mut self.creation_date_time
    }

    // Take field
    pub fn take_creation_date_time(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.creation_date_time, ::std::string::String::new())
    }

    // string modified_date_time = 4;


    pub fn get_modified_date_time(&self) -> &str {
        &self.modified_date_time
    }
    pub fn clear_modified_date_time(&mut self) {
        self.modified_date_time.clear();
    }

    // Param is passed by value, moved
    pub fn set_modified_date_time(&mut self, v: ::std::string::String) {
        self.modified_date_time = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_modified_date_time(&mut self) -> &mut ::std::string::String {
        &mut self.modified_date_time
    }

    // Take field
    pub fn take_modified_date_time(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.modified_date_time, ::std::string::String::new())
    }

    // string admission_date_time = 5;


    pub fn get_admission_date_time(&self) -> &str {
        &self.admission_date_time
    }
    pub fn clear_admission_date_time(&mut self) {
        self.admission_date_time.clear();
    }

    // Param is passed by value, moved
    pub fn set_admission_date_time(&mut self, v: ::std::string::String) {
        self.admission_date_time = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_admission_date_time(&mut self) -> &mut ::std::string::String {
        &mut self.admission_date_time
    }

    // Take field
    pub fn take_admission_date_time(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.admission_date_time, ::std::string::String::new())
    }

    // .protobuf.payment.Status status = 6;


    pub fn get_status(&self) -> Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = Status::Status_NotSet;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: Status) {
        self.status = v;
    }

    // .protobuf.payment.StatusReason status_reason = 7;


    pub fn get_status_reason(&self) -> StatusReason {
        self.status_reason
    }
    pub fn clear_status_reason(&mut self) {
        self.status_reason = StatusReason::StatusReason_NotSet;
    }

    // Param is passed by value, moved
    pub fn set_status_reason(&mut self, v: StatusReason) {
        self.status_reason = v;
    }

    // string scheme_status_code = 8;


    pub fn get_scheme_status_code(&self) -> &str {
        &self.scheme_status_code
    }
    pub fn clear_scheme_status_code(&mut self) {
        self.scheme_status_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_scheme_status_code(&mut self, v: ::std::string::String) {
        self.scheme_status_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scheme_status_code(&mut self) -> &mut ::std::string::String {
        &mut self.scheme_status_code
    }

    // Take field
    pub fn take_scheme_status_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.scheme_status_code, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Form3Data_PaymentAdmissionType {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.creation_date_time)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.modified_date_time)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.admission_date_time)?;
                },
                6 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 6, &mut self.unknown_fields)?
                },
                7 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status_reason, 7, &mut self.unknown_fields)?
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.scheme_status_code)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.version);
        }
        if !self.creation_date_time.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.creation_date_time);
        }
        if !self.modified_date_time.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.modified_date_time);
        }
        if !self.admission_date_time.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.admission_date_time);
        }
        if self.status != Status::Status_NotSet {
            my_size += ::protobuf::rt::enum_size(6, self.status);
        }
        if self.status_reason != StatusReason::StatusReason_NotSet {
            my_size += ::protobuf::rt::enum_size(7, self.status_reason);
        }
        if !self.scheme_status_code.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.scheme_status_code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.version.is_empty() {
            os.write_string(2, &self.version)?;
        }
        if !self.creation_date_time.is_empty() {
            os.write_string(3, &self.creation_date_time)?;
        }
        if !self.modified_date_time.is_empty() {
            os.write_string(4, &self.modified_date_time)?;
        }
        if !self.admission_date_time.is_empty() {
            os.write_string(5, &self.admission_date_time)?;
        }
        if self.status != Status::Status_NotSet {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if self.status_reason != StatusReason::StatusReason_NotSet {
            os.write_enum(7, ::protobuf::ProtobufEnum::value(&self.status_reason))?;
        }
        if !self.scheme_status_code.is_empty() {
            os.write_string(8, &self.scheme_status_code)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Form3Data_PaymentAdmissionType {
        Form3Data_PaymentAdmissionType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Form3Data_PaymentAdmissionType| { &m.id },
                |m: &mut Form3Data_PaymentAdmissionType| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &Form3Data_PaymentAdmissionType| { &m.version },
                |m: &mut Form3Data_PaymentAdmissionType| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "creation_date_time",
                |m: &Form3Data_PaymentAdmissionType| { &m.creation_date_time },
                |m: &mut Form3Data_PaymentAdmissionType| { &mut m.creation_date_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "modified_date_time",
                |m: &Form3Data_PaymentAdmissionType| { &m.modified_date_time },
                |m: &mut Form3Data_PaymentAdmissionType| { &mut m.modified_date_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "admission_date_time",
                |m: &Form3Data_PaymentAdmissionType| { &m.admission_date_time },
                |m: &mut Form3Data_PaymentAdmissionType| { &mut m.admission_date_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Status>>(
                "status",
                |m: &Form3Data_PaymentAdmissionType| { &m.status },
                |m: &mut Form3Data_PaymentAdmissionType| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<StatusReason>>(
                "status_reason",
                |m: &Form3Data_PaymentAdmissionType| { &m.status_reason },
                |m: &mut Form3Data_PaymentAdmissionType| { &mut m.status_reason },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "scheme_status_code",
                |m: &Form3Data_PaymentAdmissionType| { &m.scheme_status_code },
                |m: &mut Form3Data_PaymentAdmissionType| { &mut m.scheme_status_code },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Form3Data_PaymentAdmissionType>(
                "Form3Data.PaymentAdmissionType",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Form3Data_PaymentAdmissionType {
        static instance: ::protobuf::rt::LazyV2<Form3Data_PaymentAdmissionType> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Form3Data_PaymentAdmissionType::new)
    }
}

impl ::protobuf::Clear for Form3Data_PaymentAdmissionType {
    fn clear(&mut self) {
        self.id.clear();
        self.version.clear();
        self.creation_date_time.clear();
        self.modified_date_time.clear();
        self.admission_date_time.clear();
        self.status = Status::Status_NotSet;
        self.status_reason = StatusReason::StatusReason_NotSet;
        self.scheme_status_code.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Form3Data_PaymentAdmissionType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Form3Data_PaymentAdmissionType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Form3Data_PaymentType {
    // message fields
    pub version: ::std::string::String,
    pub creationDateTime: ::std::string::String,
    pub modifiedDateTime: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Form3Data_PaymentType {
    fn default() -> &'a Form3Data_PaymentType {
        <Form3Data_PaymentType as ::protobuf::Message>::default_instance()
    }
}

impl Form3Data_PaymentType {
    pub fn new() -> Form3Data_PaymentType {
        ::std::default::Default::default()
    }

    // string version = 1;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // string creationDateTime = 2;


    pub fn get_creationDateTime(&self) -> &str {
        &self.creationDateTime
    }
    pub fn clear_creationDateTime(&mut self) {
        self.creationDateTime.clear();
    }

    // Param is passed by value, moved
    pub fn set_creationDateTime(&mut self, v: ::std::string::String) {
        self.creationDateTime = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_creationDateTime(&mut self) -> &mut ::std::string::String {
        &mut self.creationDateTime
    }

    // Take field
    pub fn take_creationDateTime(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.creationDateTime, ::std::string::String::new())
    }

    // string modifiedDateTime = 3;


    pub fn get_modifiedDateTime(&self) -> &str {
        &self.modifiedDateTime
    }
    pub fn clear_modifiedDateTime(&mut self) {
        self.modifiedDateTime.clear();
    }

    // Param is passed by value, moved
    pub fn set_modifiedDateTime(&mut self, v: ::std::string::String) {
        self.modifiedDateTime = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_modifiedDateTime(&mut self) -> &mut ::std::string::String {
        &mut self.modifiedDateTime
    }

    // Take field
    pub fn take_modifiedDateTime(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.modifiedDateTime, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Form3Data_PaymentType {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.creationDateTime)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.modifiedDateTime)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.version);
        }
        if !self.creationDateTime.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.creationDateTime);
        }
        if !self.modifiedDateTime.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.modifiedDateTime);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.version.is_empty() {
            os.write_string(1, &self.version)?;
        }
        if !self.creationDateTime.is_empty() {
            os.write_string(2, &self.creationDateTime)?;
        }
        if !self.modifiedDateTime.is_empty() {
            os.write_string(3, &self.modifiedDateTime)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Form3Data_PaymentType {
        Form3Data_PaymentType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &Form3Data_PaymentType| { &m.version },
                |m: &mut Form3Data_PaymentType| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "creationDateTime",
                |m: &Form3Data_PaymentType| { &m.creationDateTime },
                |m: &mut Form3Data_PaymentType| { &mut m.creationDateTime },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "modifiedDateTime",
                |m: &Form3Data_PaymentType| { &m.modifiedDateTime },
                |m: &mut Form3Data_PaymentType| { &mut m.modifiedDateTime },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Form3Data_PaymentType>(
                "Form3Data.PaymentType",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Form3Data_PaymentType {
        static instance: ::protobuf::rt::LazyV2<Form3Data_PaymentType> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Form3Data_PaymentType::new)
    }
}

impl ::protobuf::Clear for Form3Data_PaymentType {
    fn clear(&mut self) {
        self.version.clear();
        self.creationDateTime.clear();
        self.modifiedDateTime.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Form3Data_PaymentType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Form3Data_PaymentType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Status {
    Status_NotSet = 0,
    confirmed = 1,
    failed = 2,
    pending = 3,
}

impl ::protobuf::ProtobufEnum for Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Status> {
        match value {
            0 => ::std::option::Option::Some(Status::Status_NotSet),
            1 => ::std::option::Option::Some(Status::confirmed),
            2 => ::std::option::Option::Some(Status::failed),
            3 => ::std::option::Option::Some(Status::pending),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Status] = &[
            Status::Status_NotSet,
            Status::confirmed,
            Status::failed,
            Status::pending,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Status>("Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Status {
}

impl ::std::default::Default for Status {
    fn default() -> Self {
        Status::Status_NotSet
    }
}

impl ::protobuf::reflect::ProtobufValue for Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum StatusReason {
    StatusReason_NotSet = 0,
    accepted = 1,
    invalid_beneficiary_details = 2,
    bankid_not_provisioned = 3,
    unknown_accountnumber = 4,
}

impl ::protobuf::ProtobufEnum for StatusReason {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<StatusReason> {
        match value {
            0 => ::std::option::Option::Some(StatusReason::StatusReason_NotSet),
            1 => ::std::option::Option::Some(StatusReason::accepted),
            2 => ::std::option::Option::Some(StatusReason::invalid_beneficiary_details),
            3 => ::std::option::Option::Some(StatusReason::bankid_not_provisioned),
            4 => ::std::option::Option::Some(StatusReason::unknown_accountnumber),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [StatusReason] = &[
            StatusReason::StatusReason_NotSet,
            StatusReason::accepted,
            StatusReason::invalid_beneficiary_details,
            StatusReason::bankid_not_provisioned,
            StatusReason::unknown_accountnumber,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<StatusReason>("StatusReason", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for StatusReason {
}

impl ::std::default::Default for StatusReason {
    fn default() -> Self {
        StatusReason::StatusReason_NotSet
    }
}

impl ::protobuf::reflect::ProtobufValue for StatusReason {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18payment_form3_data.proto\x12\x10protobuf.payment\"\xe8\x05\n\tForm\
    3Data\x12\x1b\n\tsource_id\x18\x01\x20\x01(\tR\x08sourceId\x12'\n\x0forg\
    anisation_id\x18\x02\x20\x01(\tR\x0eorganisationId\x12]\n\x11payment_adm\
    ission\x18\x03\x20\x01(\x0b20.protobuf.payment.Form3Data.PaymentAdmissio\
    nTypeR\x10paymentAdmission\x12A\n\x07payment\x18\x04\x20\x01(\x0b2'.prot\
    obuf.payment.Form3Data.PaymentTypeR\x07payment\x1a\xf1\x02\n\x14PaymentA\
    dmissionType\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x18\n\x07vers\
    ion\x18\x02\x20\x01(\tR\x07version\x12,\n\x12creation_date_time\x18\x03\
    \x20\x01(\tR\x10creationDateTime\x12,\n\x12modified_date_time\x18\x04\
    \x20\x01(\tR\x10modifiedDateTime\x12.\n\x13admission_date_time\x18\x05\
    \x20\x01(\tR\x11admissionDateTime\x120\n\x06status\x18\x06\x20\x01(\x0e2\
    \x18.protobuf.payment.StatusR\x06status\x12C\n\rstatus_reason\x18\x07\
    \x20\x01(\x0e2\x1e.protobuf.payment.StatusReasonR\x0cstatusReason\x12,\n\
    \x12scheme_status_code\x18\x08\x20\x01(\tR\x10schemeStatusCode\x1a\x7f\n\
    \x0bPaymentType\x12\x18\n\x07version\x18\x01\x20\x01(\tR\x07version\x12*\
    \n\x10creationDateTime\x18\x02\x20\x01(\tR\x10creationDateTime\x12*\n\
    \x10modifiedDateTime\x18\x03\x20\x01(\tR\x10modifiedDateTime*C\n\x06Stat\
    us\x12\x11\n\rStatus_NotSet\x10\0\x12\r\n\tconfirmed\x10\x01\x12\n\n\x06\
    failed\x10\x02\x12\x0b\n\x07pending\x10\x03*\x8d\x01\n\x0cStatusReason\
    \x12\x17\n\x13StatusReason_NotSet\x10\0\x12\x0c\n\x08accepted\x10\x01\
    \x12\x1f\n\x1binvalid_beneficiary_details\x10\x02\x12\x1a\n\x16bankid_no\
    t_provisioned\x10\x03\x12\x19\n\x15unknown_accountnumber\x10\x04BA\n-uk.\
    co.nationwide.payments.schema.payment.bodyB\x10PaymentForm3Datab\x06prot\
    o3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
