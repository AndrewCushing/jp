// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `payment_envelope_body_part.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct BodyPart {
    // message fields
    pub part_name: PartName,
    pub part_type: ::std::string::String,
    pub part_content_type: ::std::string::String,
    pub part_content_transfer_encoding: ::std::string::String,
    // message oneof groups
    pub content: ::std::option::Option<BodyPart_oneof_content>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BodyPart {
    fn default() -> &'a BodyPart {
        <BodyPart as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum BodyPart_oneof_content {
    payment_iso_20022(super::payment_pacs_008_001_06::Pacs_008_001_06),
    payment_identifiers(super::payment_identifiers::Identifiers),
    ledger_posting(super::payment_ledger_posting::LedgerPosting),
    form3_data(super::payment_form3_data::Form3Data),
    raw_message_data(super::payment_raw_message_data::RawMessageData),
}

impl BodyPart {
    pub fn new() -> BodyPart {
        ::std::default::Default::default()
    }

    // .protobuf.payment.PartName part_name = 1;


    pub fn get_part_name(&self) -> PartName {
        self.part_name
    }
    pub fn clear_part_name(&mut self) {
        self.part_name = PartName::PartName_NotSet;
    }

    // Param is passed by value, moved
    pub fn set_part_name(&mut self, v: PartName) {
        self.part_name = v;
    }

    // string part_type = 2;


    pub fn get_part_type(&self) -> &str {
        &self.part_type
    }
    pub fn clear_part_type(&mut self) {
        self.part_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_part_type(&mut self, v: ::std::string::String) {
        self.part_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_part_type(&mut self) -> &mut ::std::string::String {
        &mut self.part_type
    }

    // Take field
    pub fn take_part_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.part_type, ::std::string::String::new())
    }

    // string part_content_type = 3;


    pub fn get_part_content_type(&self) -> &str {
        &self.part_content_type
    }
    pub fn clear_part_content_type(&mut self) {
        self.part_content_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_part_content_type(&mut self, v: ::std::string::String) {
        self.part_content_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_part_content_type(&mut self) -> &mut ::std::string::String {
        &mut self.part_content_type
    }

    // Take field
    pub fn take_part_content_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.part_content_type, ::std::string::String::new())
    }

    // string part_content_transfer_encoding = 4;


    pub fn get_part_content_transfer_encoding(&self) -> &str {
        &self.part_content_transfer_encoding
    }
    pub fn clear_part_content_transfer_encoding(&mut self) {
        self.part_content_transfer_encoding.clear();
    }

    // Param is passed by value, moved
    pub fn set_part_content_transfer_encoding(&mut self, v: ::std::string::String) {
        self.part_content_transfer_encoding = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_part_content_transfer_encoding(&mut self) -> &mut ::std::string::String {
        &mut self.part_content_transfer_encoding
    }

    // Take field
    pub fn take_part_content_transfer_encoding(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.part_content_transfer_encoding, ::std::string::String::new())
    }

    // .protobuf.payment.Pacs_008_001_06 payment_iso_20022 = 5;


    pub fn get_payment_iso_20022(&self) -> &super::payment_pacs_008_001_06::Pacs_008_001_06 {
        match self.content {
            ::std::option::Option::Some(BodyPart_oneof_content::payment_iso_20022(ref v)) => v,
            _ => <super::payment_pacs_008_001_06::Pacs_008_001_06 as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_payment_iso_20022(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_payment_iso_20022(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(BodyPart_oneof_content::payment_iso_20022(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_payment_iso_20022(&mut self, v: super::payment_pacs_008_001_06::Pacs_008_001_06) {
        self.content = ::std::option::Option::Some(BodyPart_oneof_content::payment_iso_20022(v))
    }

    // Mutable pointer to the field.
    pub fn mut_payment_iso_20022(&mut self) -> &mut super::payment_pacs_008_001_06::Pacs_008_001_06 {
        if let ::std::option::Option::Some(BodyPart_oneof_content::payment_iso_20022(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(BodyPart_oneof_content::payment_iso_20022(super::payment_pacs_008_001_06::Pacs_008_001_06::new()));
        }
        match self.content {
            ::std::option::Option::Some(BodyPart_oneof_content::payment_iso_20022(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_payment_iso_20022(&mut self) -> super::payment_pacs_008_001_06::Pacs_008_001_06 {
        if self.has_payment_iso_20022() {
            match self.content.take() {
                ::std::option::Option::Some(BodyPart_oneof_content::payment_iso_20022(v)) => v,
                _ => panic!(),
            }
        } else {
            super::payment_pacs_008_001_06::Pacs_008_001_06::new()
        }
    }

    // .protobuf.payment.Identifiers payment_identifiers = 6;


    pub fn get_payment_identifiers(&self) -> &super::payment_identifiers::Identifiers {
        match self.content {
            ::std::option::Option::Some(BodyPart_oneof_content::payment_identifiers(ref v)) => v,
            _ => <super::payment_identifiers::Identifiers as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_payment_identifiers(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_payment_identifiers(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(BodyPart_oneof_content::payment_identifiers(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_payment_identifiers(&mut self, v: super::payment_identifiers::Identifiers) {
        self.content = ::std::option::Option::Some(BodyPart_oneof_content::payment_identifiers(v))
    }

    // Mutable pointer to the field.
    pub fn mut_payment_identifiers(&mut self) -> &mut super::payment_identifiers::Identifiers {
        if let ::std::option::Option::Some(BodyPart_oneof_content::payment_identifiers(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(BodyPart_oneof_content::payment_identifiers(super::payment_identifiers::Identifiers::new()));
        }
        match self.content {
            ::std::option::Option::Some(BodyPart_oneof_content::payment_identifiers(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_payment_identifiers(&mut self) -> super::payment_identifiers::Identifiers {
        if self.has_payment_identifiers() {
            match self.content.take() {
                ::std::option::Option::Some(BodyPart_oneof_content::payment_identifiers(v)) => v,
                _ => panic!(),
            }
        } else {
            super::payment_identifiers::Identifiers::new()
        }
    }

    // .protobuf.payment.LedgerPosting ledger_posting = 7;


    pub fn get_ledger_posting(&self) -> &super::payment_ledger_posting::LedgerPosting {
        match self.content {
            ::std::option::Option::Some(BodyPart_oneof_content::ledger_posting(ref v)) => v,
            _ => <super::payment_ledger_posting::LedgerPosting as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_ledger_posting(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_ledger_posting(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(BodyPart_oneof_content::ledger_posting(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ledger_posting(&mut self, v: super::payment_ledger_posting::LedgerPosting) {
        self.content = ::std::option::Option::Some(BodyPart_oneof_content::ledger_posting(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ledger_posting(&mut self) -> &mut super::payment_ledger_posting::LedgerPosting {
        if let ::std::option::Option::Some(BodyPart_oneof_content::ledger_posting(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(BodyPart_oneof_content::ledger_posting(super::payment_ledger_posting::LedgerPosting::new()));
        }
        match self.content {
            ::std::option::Option::Some(BodyPart_oneof_content::ledger_posting(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ledger_posting(&mut self) -> super::payment_ledger_posting::LedgerPosting {
        if self.has_ledger_posting() {
            match self.content.take() {
                ::std::option::Option::Some(BodyPart_oneof_content::ledger_posting(v)) => v,
                _ => panic!(),
            }
        } else {
            super::payment_ledger_posting::LedgerPosting::new()
        }
    }

    // .protobuf.payment.Form3Data form3_data = 8;


    pub fn get_form3_data(&self) -> &super::payment_form3_data::Form3Data {
        match self.content {
            ::std::option::Option::Some(BodyPart_oneof_content::form3_data(ref v)) => v,
            _ => <super::payment_form3_data::Form3Data as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_form3_data(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_form3_data(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(BodyPart_oneof_content::form3_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_form3_data(&mut self, v: super::payment_form3_data::Form3Data) {
        self.content = ::std::option::Option::Some(BodyPart_oneof_content::form3_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_form3_data(&mut self) -> &mut super::payment_form3_data::Form3Data {
        if let ::std::option::Option::Some(BodyPart_oneof_content::form3_data(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(BodyPart_oneof_content::form3_data(super::payment_form3_data::Form3Data::new()));
        }
        match self.content {
            ::std::option::Option::Some(BodyPart_oneof_content::form3_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_form3_data(&mut self) -> super::payment_form3_data::Form3Data {
        if self.has_form3_data() {
            match self.content.take() {
                ::std::option::Option::Some(BodyPart_oneof_content::form3_data(v)) => v,
                _ => panic!(),
            }
        } else {
            super::payment_form3_data::Form3Data::new()
        }
    }

    // .protobuf.payment.RawMessageData raw_message_data = 9;


    pub fn get_raw_message_data(&self) -> &super::payment_raw_message_data::RawMessageData {
        match self.content {
            ::std::option::Option::Some(BodyPart_oneof_content::raw_message_data(ref v)) => v,
            _ => <super::payment_raw_message_data::RawMessageData as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_raw_message_data(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_raw_message_data(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(BodyPart_oneof_content::raw_message_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raw_message_data(&mut self, v: super::payment_raw_message_data::RawMessageData) {
        self.content = ::std::option::Option::Some(BodyPart_oneof_content::raw_message_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raw_message_data(&mut self) -> &mut super::payment_raw_message_data::RawMessageData {
        if let ::std::option::Option::Some(BodyPart_oneof_content::raw_message_data(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(BodyPart_oneof_content::raw_message_data(super::payment_raw_message_data::RawMessageData::new()));
        }
        match self.content {
            ::std::option::Option::Some(BodyPart_oneof_content::raw_message_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raw_message_data(&mut self) -> super::payment_raw_message_data::RawMessageData {
        if self.has_raw_message_data() {
            match self.content.take() {
                ::std::option::Option::Some(BodyPart_oneof_content::raw_message_data(v)) => v,
                _ => panic!(),
            }
        } else {
            super::payment_raw_message_data::RawMessageData::new()
        }
    }
}

impl ::protobuf::Message for BodyPart {
    fn is_initialized(&self) -> bool {
        if let Some(BodyPart_oneof_content::payment_iso_20022(ref v)) = self.content {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BodyPart_oneof_content::payment_identifiers(ref v)) = self.content {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BodyPart_oneof_content::ledger_posting(ref v)) = self.content {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BodyPart_oneof_content::form3_data(ref v)) = self.content {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BodyPart_oneof_content::raw_message_data(ref v)) = self.content {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.part_name, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.part_type)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.part_content_type)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.part_content_transfer_encoding)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.content = ::std::option::Option::Some(BodyPart_oneof_content::payment_iso_20022(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.content = ::std::option::Option::Some(BodyPart_oneof_content::payment_identifiers(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.content = ::std::option::Option::Some(BodyPart_oneof_content::ledger_posting(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.content = ::std::option::Option::Some(BodyPart_oneof_content::form3_data(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.content = ::std::option::Option::Some(BodyPart_oneof_content::raw_message_data(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.part_name != PartName::PartName_NotSet {
            my_size += ::protobuf::rt::enum_size(1, self.part_name);
        }
        if !self.part_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.part_type);
        }
        if !self.part_content_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.part_content_type);
        }
        if !self.part_content_transfer_encoding.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.part_content_transfer_encoding);
        }
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &BodyPart_oneof_content::payment_iso_20022(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BodyPart_oneof_content::payment_identifiers(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BodyPart_oneof_content::ledger_posting(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BodyPart_oneof_content::form3_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BodyPart_oneof_content::raw_message_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.part_name != PartName::PartName_NotSet {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.part_name))?;
        }
        if !self.part_type.is_empty() {
            os.write_string(2, &self.part_type)?;
        }
        if !self.part_content_type.is_empty() {
            os.write_string(3, &self.part_content_type)?;
        }
        if !self.part_content_transfer_encoding.is_empty() {
            os.write_string(4, &self.part_content_transfer_encoding)?;
        }
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &BodyPart_oneof_content::payment_iso_20022(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BodyPart_oneof_content::payment_identifiers(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BodyPart_oneof_content::ledger_posting(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BodyPart_oneof_content::form3_data(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BodyPart_oneof_content::raw_message_data(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BodyPart {
        BodyPart::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<PartName>>(
                "part_name",
                |m: &BodyPart| { &m.part_name },
                |m: &mut BodyPart| { &mut m.part_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "part_type",
                |m: &BodyPart| { &m.part_type },
                |m: &mut BodyPart| { &mut m.part_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "part_content_type",
                |m: &BodyPart| { &m.part_content_type },
                |m: &mut BodyPart| { &mut m.part_content_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "part_content_transfer_encoding",
                |m: &BodyPart| { &m.part_content_transfer_encoding },
                |m: &mut BodyPart| { &mut m.part_content_transfer_encoding },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::payment_pacs_008_001_06::Pacs_008_001_06>(
                "payment_iso_20022",
                BodyPart::has_payment_iso_20022,
                BodyPart::get_payment_iso_20022,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::payment_identifiers::Identifiers>(
                "payment_identifiers",
                BodyPart::has_payment_identifiers,
                BodyPart::get_payment_identifiers,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::payment_ledger_posting::LedgerPosting>(
                "ledger_posting",
                BodyPart::has_ledger_posting,
                BodyPart::get_ledger_posting,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::payment_form3_data::Form3Data>(
                "form3_data",
                BodyPart::has_form3_data,
                BodyPart::get_form3_data,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::payment_raw_message_data::RawMessageData>(
                "raw_message_data",
                BodyPart::has_raw_message_data,
                BodyPart::get_raw_message_data,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BodyPart>(
                "BodyPart",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BodyPart {
        static instance: ::protobuf::rt::LazyV2<BodyPart> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BodyPart::new)
    }
}

impl ::protobuf::Clear for BodyPart {
    fn clear(&mut self) {
        self.part_name = PartName::PartName_NotSet;
        self.part_type.clear();
        self.part_content_type.clear();
        self.part_content_transfer_encoding.clear();
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BodyPart {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BodyPart {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum PartName {
    PartName_NotSet = 0,
    paymentmessage = 1,
    paymentidentifiers = 2,
    ledgerposting = 3,
    form3data = 4,
    rawmessagedata = 5,
}

impl ::protobuf::ProtobufEnum for PartName {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PartName> {
        match value {
            0 => ::std::option::Option::Some(PartName::PartName_NotSet),
            1 => ::std::option::Option::Some(PartName::paymentmessage),
            2 => ::std::option::Option::Some(PartName::paymentidentifiers),
            3 => ::std::option::Option::Some(PartName::ledgerposting),
            4 => ::std::option::Option::Some(PartName::form3data),
            5 => ::std::option::Option::Some(PartName::rawmessagedata),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [PartName] = &[
            PartName::PartName_NotSet,
            PartName::paymentmessage,
            PartName::paymentidentifiers,
            PartName::ledgerposting,
            PartName::form3data,
            PartName::rawmessagedata,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<PartName>("PartName", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for PartName {
}

impl ::std::default::Default for PartName {
    fn default() -> Self {
        PartName::PartName_NotSet
    }
}

impl ::protobuf::reflect::ProtobufValue for PartName {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20payment_envelope_body_part.proto\x12\x10protobuf.payment\x1a\x1dpa\
    yment_pacs_008_001_06.proto\x1a\x1cpayment_ledger_posting.proto\x1a\x19p\
    ayment_identifiers.proto\x1a\x18payment_form3_data.proto\x1a\x1epayment_\
    raw_message_data.proto\"\xd5\x04\n\x08BodyPart\x127\n\tpart_name\x18\x01\
    \x20\x01(\x0e2\x1a.protobuf.payment.PartNameR\x08partName\x12\x1b\n\tpar\
    t_type\x18\x02\x20\x01(\tR\x08partType\x12*\n\x11part_content_type\x18\
    \x03\x20\x01(\tR\x0fpartContentType\x12C\n\x1epart_content_transfer_enco\
    ding\x18\x04\x20\x01(\tR\x1bpartContentTransferEncoding\x12O\n\x11paymen\
    t_iso_20022\x18\x05\x20\x01(\x0b2!.protobuf.payment.Pacs_008_001_06H\0R\
    \x0fpaymentIso20022\x12P\n\x13payment_identifiers\x18\x06\x20\x01(\x0b2\
    \x1d.protobuf.payment.IdentifiersH\0R\x12paymentIdentifiers\x12H\n\x0ele\
    dger_posting\x18\x07\x20\x01(\x0b2\x1f.protobuf.payment.LedgerPostingH\0\
    R\rledgerPosting\x12<\n\nform3_data\x18\x08\x20\x01(\x0b2\x1b.protobuf.p\
    ayment.Form3DataH\0R\tform3Data\x12L\n\x10raw_message_data\x18\t\x20\x01\
    (\x0b2\x20.protobuf.payment.RawMessageDataH\0R\x0erawMessageDataB\t\n\
    \x07content*\x81\x01\n\x08PartName\x12\x13\n\x0fPartName_NotSet\x10\0\
    \x12\x12\n\x0epaymentmessage\x10\x01\x12\x16\n\x12paymentidentifiers\x10\
    \x02\x12\x11\n\rledgerposting\x10\x03\x12\r\n\tform3data\x10\x04\x12\x12\
    \n\x0erawmessagedata\x10\x05B@\n-uk.co.nationwide.payments.schema.paymen\
    t.bodyB\x0fPaymentBodyPartb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
