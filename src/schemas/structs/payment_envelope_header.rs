// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `payment_envelope_header.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Header {
    // message fields
    pub properties: ::protobuf::SingularPtrField<Properties>,
    pub signatures: ::protobuf::RepeatedField<Signature>,
    pub state: ::protobuf::RepeatedField<PaymentState>,
    pub exception: ::protobuf::SingularPtrField<PaymentException>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Header {
    fn default() -> &'a Header {
        <Header as ::protobuf::Message>::default_instance()
    }
}

impl Header {
    pub fn new() -> Header {
        ::std::default::Default::default()
    }

    // .protobuf.payment.Properties properties = 1;


    pub fn get_properties(&self) -> &Properties {
        self.properties.as_ref().unwrap_or_else(|| <Properties as ::protobuf::Message>::default_instance())
    }
    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    pub fn has_properties(&self) -> bool {
        self.properties.is_some()
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: Properties) {
        self.properties = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_properties(&mut self) -> &mut Properties {
        if self.properties.is_none() {
            self.properties.set_default();
        }
        self.properties.as_mut().unwrap()
    }

    // Take field
    pub fn take_properties(&mut self) -> Properties {
        self.properties.take().unwrap_or_else(|| Properties::new())
    }

    // repeated .protobuf.payment.Signature signatures = 2;


    pub fn get_signatures(&self) -> &[Signature] {
        &self.signatures
    }
    pub fn clear_signatures(&mut self) {
        self.signatures.clear();
    }

    // Param is passed by value, moved
    pub fn set_signatures(&mut self, v: ::protobuf::RepeatedField<Signature>) {
        self.signatures = v;
    }

    // Mutable pointer to the field.
    pub fn mut_signatures(&mut self) -> &mut ::protobuf::RepeatedField<Signature> {
        &mut self.signatures
    }

    // Take field
    pub fn take_signatures(&mut self) -> ::protobuf::RepeatedField<Signature> {
        ::std::mem::replace(&mut self.signatures, ::protobuf::RepeatedField::new())
    }

    // repeated .protobuf.payment.PaymentState state = 3;


    pub fn get_state(&self) -> &[PaymentState] {
        &self.state
    }
    pub fn clear_state(&mut self) {
        self.state.clear();
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: ::protobuf::RepeatedField<PaymentState>) {
        self.state = v;
    }

    // Mutable pointer to the field.
    pub fn mut_state(&mut self) -> &mut ::protobuf::RepeatedField<PaymentState> {
        &mut self.state
    }

    // Take field
    pub fn take_state(&mut self) -> ::protobuf::RepeatedField<PaymentState> {
        ::std::mem::replace(&mut self.state, ::protobuf::RepeatedField::new())
    }

    // .protobuf.payment.PaymentException exception = 4;


    pub fn get_exception(&self) -> &PaymentException {
        self.exception.as_ref().unwrap_or_else(|| <PaymentException as ::protobuf::Message>::default_instance())
    }
    pub fn clear_exception(&mut self) {
        self.exception.clear();
    }

    pub fn has_exception(&self) -> bool {
        self.exception.is_some()
    }

    // Param is passed by value, moved
    pub fn set_exception(&mut self, v: PaymentException) {
        self.exception = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_exception(&mut self) -> &mut PaymentException {
        if self.exception.is_none() {
            self.exception.set_default();
        }
        self.exception.as_mut().unwrap()
    }

    // Take field
    pub fn take_exception(&mut self) -> PaymentException {
        self.exception.take().unwrap_or_else(|| PaymentException::new())
    }
}

impl ::protobuf::Message for Header {
    fn is_initialized(&self) -> bool {
        for v in &self.properties {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.signatures {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.state {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.exception {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.properties)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.signatures)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.state)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.exception)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.properties.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.signatures {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.state {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.exception.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.properties.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.signatures {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.state {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.exception.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Header {
        Header::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Properties>>(
                "properties",
                |m: &Header| { &m.properties },
                |m: &mut Header| { &mut m.properties },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Signature>>(
                "signatures",
                |m: &Header| { &m.signatures },
                |m: &mut Header| { &mut m.signatures },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PaymentState>>(
                "state",
                |m: &Header| { &m.state },
                |m: &mut Header| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PaymentException>>(
                "exception",
                |m: &Header| { &m.exception },
                |m: &mut Header| { &mut m.exception },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Header>(
                "Header",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Header {
        static instance: ::protobuf::rt::LazyV2<Header> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Header::new)
    }
}

impl ::protobuf::Clear for Header {
    fn clear(&mut self) {
        self.properties.clear();
        self.signatures.clear();
        self.state.clear();
        self.exception.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Header {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Header {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Properties {
    // message fields
    pub message_id: ::std::string::String,
    pub message_type: ::std::string::String,
    pub timestamp: ::std::string::String,
    pub payment_status: PaymentStatus,
    pub payment_scheme: PaymentScheme,
    pub paymentType: PaymentType,
    pub paymentStatusCount: i32,
    pub trace_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Properties {
    fn default() -> &'a Properties {
        <Properties as ::protobuf::Message>::default_instance()
    }
}

impl Properties {
    pub fn new() -> Properties {
        ::std::default::Default::default()
    }

    // string message_id = 1;


    pub fn get_message_id(&self) -> &str {
        &self.message_id
    }
    pub fn clear_message_id(&mut self) {
        self.message_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_message_id(&mut self, v: ::std::string::String) {
        self.message_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message_id(&mut self) -> &mut ::std::string::String {
        &mut self.message_id
    }

    // Take field
    pub fn take_message_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message_id, ::std::string::String::new())
    }

    // string message_type = 2;


    pub fn get_message_type(&self) -> &str {
        &self.message_type
    }
    pub fn clear_message_type(&mut self) {
        self.message_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_message_type(&mut self, v: ::std::string::String) {
        self.message_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message_type(&mut self) -> &mut ::std::string::String {
        &mut self.message_type
    }

    // Take field
    pub fn take_message_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message_type, ::std::string::String::new())
    }

    // string timestamp = 3;


    pub fn get_timestamp(&self) -> &str {
        &self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::std::string::String) {
        self.timestamp = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::std::string::String {
        &mut self.timestamp
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.timestamp, ::std::string::String::new())
    }

    // .protobuf.payment.PaymentStatus payment_status = 4;


    pub fn get_payment_status(&self) -> PaymentStatus {
        self.payment_status
    }
    pub fn clear_payment_status(&mut self) {
        self.payment_status = PaymentStatus::PaymentStatus_NotSet;
    }

    // Param is passed by value, moved
    pub fn set_payment_status(&mut self, v: PaymentStatus) {
        self.payment_status = v;
    }

    // .protobuf.payment.PaymentScheme payment_scheme = 5;


    pub fn get_payment_scheme(&self) -> PaymentScheme {
        self.payment_scheme
    }
    pub fn clear_payment_scheme(&mut self) {
        self.payment_scheme = PaymentScheme::PaymentScheme_NotSet;
    }

    // Param is passed by value, moved
    pub fn set_payment_scheme(&mut self, v: PaymentScheme) {
        self.payment_scheme = v;
    }

    // .protobuf.payment.PaymentType paymentType = 6;


    pub fn get_paymentType(&self) -> PaymentType {
        self.paymentType
    }
    pub fn clear_paymentType(&mut self) {
        self.paymentType = PaymentType::PaymentType_NotSet;
    }

    // Param is passed by value, moved
    pub fn set_paymentType(&mut self, v: PaymentType) {
        self.paymentType = v;
    }

    // int32 paymentStatusCount = 7;


    pub fn get_paymentStatusCount(&self) -> i32 {
        self.paymentStatusCount
    }
    pub fn clear_paymentStatusCount(&mut self) {
        self.paymentStatusCount = 0;
    }

    // Param is passed by value, moved
    pub fn set_paymentStatusCount(&mut self, v: i32) {
        self.paymentStatusCount = v;
    }

    // string trace_id = 8;


    pub fn get_trace_id(&self) -> &str {
        &self.trace_id
    }
    pub fn clear_trace_id(&mut self) {
        self.trace_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_trace_id(&mut self, v: ::std::string::String) {
        self.trace_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trace_id(&mut self) -> &mut ::std::string::String {
        &mut self.trace_id
    }

    // Take field
    pub fn take_trace_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trace_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Properties {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message_type)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.timestamp)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.payment_status, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.payment_scheme, 5, &mut self.unknown_fields)?
                },
                6 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.paymentType, 6, &mut self.unknown_fields)?
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.paymentStatusCount = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trace_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.message_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.message_id);
        }
        if !self.message_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message_type);
        }
        if !self.timestamp.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.timestamp);
        }
        if self.payment_status != PaymentStatus::PaymentStatus_NotSet {
            my_size += ::protobuf::rt::enum_size(4, self.payment_status);
        }
        if self.payment_scheme != PaymentScheme::PaymentScheme_NotSet {
            my_size += ::protobuf::rt::enum_size(5, self.payment_scheme);
        }
        if self.paymentType != PaymentType::PaymentType_NotSet {
            my_size += ::protobuf::rt::enum_size(6, self.paymentType);
        }
        if self.paymentStatusCount != 0 {
            my_size += ::protobuf::rt::value_size(7, self.paymentStatusCount, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.trace_id.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.trace_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.message_id.is_empty() {
            os.write_string(1, &self.message_id)?;
        }
        if !self.message_type.is_empty() {
            os.write_string(2, &self.message_type)?;
        }
        if !self.timestamp.is_empty() {
            os.write_string(3, &self.timestamp)?;
        }
        if self.payment_status != PaymentStatus::PaymentStatus_NotSet {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.payment_status))?;
        }
        if self.payment_scheme != PaymentScheme::PaymentScheme_NotSet {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.payment_scheme))?;
        }
        if self.paymentType != PaymentType::PaymentType_NotSet {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&self.paymentType))?;
        }
        if self.paymentStatusCount != 0 {
            os.write_int32(7, self.paymentStatusCount)?;
        }
        if !self.trace_id.is_empty() {
            os.write_string(8, &self.trace_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Properties {
        Properties::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message_id",
                |m: &Properties| { &m.message_id },
                |m: &mut Properties| { &mut m.message_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message_type",
                |m: &Properties| { &m.message_type },
                |m: &mut Properties| { &mut m.message_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "timestamp",
                |m: &Properties| { &m.timestamp },
                |m: &mut Properties| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<PaymentStatus>>(
                "payment_status",
                |m: &Properties| { &m.payment_status },
                |m: &mut Properties| { &mut m.payment_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<PaymentScheme>>(
                "payment_scheme",
                |m: &Properties| { &m.payment_scheme },
                |m: &mut Properties| { &mut m.payment_scheme },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<PaymentType>>(
                "paymentType",
                |m: &Properties| { &m.paymentType },
                |m: &mut Properties| { &mut m.paymentType },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "paymentStatusCount",
                |m: &Properties| { &m.paymentStatusCount },
                |m: &mut Properties| { &mut m.paymentStatusCount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "trace_id",
                |m: &Properties| { &m.trace_id },
                |m: &mut Properties| { &mut m.trace_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Properties>(
                "Properties",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Properties {
        static instance: ::protobuf::rt::LazyV2<Properties> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Properties::new)
    }
}

impl ::protobuf::Clear for Properties {
    fn clear(&mut self) {
        self.message_id.clear();
        self.message_type.clear();
        self.timestamp.clear();
        self.payment_status = PaymentStatus::PaymentStatus_NotSet;
        self.payment_scheme = PaymentScheme::PaymentScheme_NotSet;
        self.paymentType = PaymentType::PaymentType_NotSet;
        self.paymentStatusCount = 0;
        self.trace_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Properties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Properties {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Signature {
    // message fields
    pub part_names: ::std::vec::Vec<super::payment_envelope_body_part::PartName>,
    pub signature: ::std::string::String,
    pub signature_algorithm: ::std::string::String,
    pub key_id: ::std::string::String,
    pub key_store: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Signature {
    fn default() -> &'a Signature {
        <Signature as ::protobuf::Message>::default_instance()
    }
}

impl Signature {
    pub fn new() -> Signature {
        ::std::default::Default::default()
    }

    // repeated .protobuf.payment.PartName part_names = 1;


    pub fn get_part_names(&self) -> &[super::payment_envelope_body_part::PartName] {
        &self.part_names
    }
    pub fn clear_part_names(&mut self) {
        self.part_names.clear();
    }

    // Param is passed by value, moved
    pub fn set_part_names(&mut self, v: ::std::vec::Vec<super::payment_envelope_body_part::PartName>) {
        self.part_names = v;
    }

    // Mutable pointer to the field.
    pub fn mut_part_names(&mut self) -> &mut ::std::vec::Vec<super::payment_envelope_body_part::PartName> {
        &mut self.part_names
    }

    // Take field
    pub fn take_part_names(&mut self) -> ::std::vec::Vec<super::payment_envelope_body_part::PartName> {
        ::std::mem::replace(&mut self.part_names, ::std::vec::Vec::new())
    }

    // string signature = 2;


    pub fn get_signature(&self) -> &str {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::string::String) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::string::String {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.signature, ::std::string::String::new())
    }

    // string signature_algorithm = 3;


    pub fn get_signature_algorithm(&self) -> &str {
        &self.signature_algorithm
    }
    pub fn clear_signature_algorithm(&mut self) {
        self.signature_algorithm.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature_algorithm(&mut self, v: ::std::string::String) {
        self.signature_algorithm = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature_algorithm(&mut self) -> &mut ::std::string::String {
        &mut self.signature_algorithm
    }

    // Take field
    pub fn take_signature_algorithm(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.signature_algorithm, ::std::string::String::new())
    }

    // string key_id = 4;


    pub fn get_key_id(&self) -> &str {
        &self.key_id
    }
    pub fn clear_key_id(&mut self) {
        self.key_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_key_id(&mut self, v: ::std::string::String) {
        self.key_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_id(&mut self) -> &mut ::std::string::String {
        &mut self.key_id
    }

    // Take field
    pub fn take_key_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key_id, ::std::string::String::new())
    }

    // string key_store = 5;


    pub fn get_key_store(&self) -> &str {
        &self.key_store
    }
    pub fn clear_key_store(&mut self) {
        self.key_store.clear();
    }

    // Param is passed by value, moved
    pub fn set_key_store(&mut self, v: ::std::string::String) {
        self.key_store = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_store(&mut self) -> &mut ::std::string::String {
        &mut self.key_store
    }

    // Take field
    pub fn take_key_store(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key_store, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Signature {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.part_names, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.signature)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.signature_algorithm)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key_id)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key_store)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.part_names {
            my_size += ::protobuf::rt::enum_size(1, *value);
        };
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.signature);
        }
        if !self.signature_algorithm.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.signature_algorithm);
        }
        if !self.key_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.key_id);
        }
        if !self.key_store.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.key_store);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.part_names {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(v))?;
        };
        if !self.signature.is_empty() {
            os.write_string(2, &self.signature)?;
        }
        if !self.signature_algorithm.is_empty() {
            os.write_string(3, &self.signature_algorithm)?;
        }
        if !self.key_id.is_empty() {
            os.write_string(4, &self.key_id)?;
        }
        if !self.key_store.is_empty() {
            os.write_string(5, &self.key_store)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Signature {
        Signature::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::payment_envelope_body_part::PartName>>(
                "part_names",
                |m: &Signature| { &m.part_names },
                |m: &mut Signature| { &mut m.part_names },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "signature",
                |m: &Signature| { &m.signature },
                |m: &mut Signature| { &mut m.signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "signature_algorithm",
                |m: &Signature| { &m.signature_algorithm },
                |m: &mut Signature| { &mut m.signature_algorithm },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key_id",
                |m: &Signature| { &m.key_id },
                |m: &mut Signature| { &mut m.key_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key_store",
                |m: &Signature| { &m.key_store },
                |m: &mut Signature| { &mut m.key_store },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Signature>(
                "Signature",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Signature {
        static instance: ::protobuf::rt::LazyV2<Signature> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Signature::new)
    }
}

impl ::protobuf::Clear for Signature {
    fn clear(&mut self) {
        self.part_names.clear();
        self.signature.clear();
        self.signature_algorithm.clear();
        self.key_id.clear();
        self.key_store.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Signature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Signature {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PaymentState {
    // message fields
    pub name: ::std::string::String,
    pub value: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PaymentState {
    fn default() -> &'a PaymentState {
        <PaymentState as ::protobuf::Message>::default_instance()
    }
}

impl PaymentState {
    pub fn new() -> PaymentState {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated .protobuf.payment.PaymentState.ValueEntry value = 2;


    pub fn get_value(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    pub fn mut_value(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.value, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for PaymentState {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.value);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.value, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PaymentState {
        PaymentState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &PaymentState| { &m.name },
                |m: &mut PaymentState| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &PaymentState| { &m.value },
                |m: &mut PaymentState| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PaymentState>(
                "PaymentState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PaymentState {
        static instance: ::protobuf::rt::LazyV2<PaymentState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PaymentState::new)
    }
}

impl ::protobuf::Clear for PaymentState {
    fn clear(&mut self) {
        self.name.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PaymentState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PaymentException {
    // message fields
    pub state: ExceptionState,
    pub queue: ExceptionQueue,
    pub reason: ::std::string::String,
    pub timestamp: ::std::string::String,
    pub service: Service,
    pub additional_data: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PaymentException {
    fn default() -> &'a PaymentException {
        <PaymentException as ::protobuf::Message>::default_instance()
    }
}

impl PaymentException {
    pub fn new() -> PaymentException {
        ::std::default::Default::default()
    }

    // .protobuf.payment.ExceptionState state = 1;


    pub fn get_state(&self) -> ExceptionState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = ExceptionState::ExceptionState_NotSet;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: ExceptionState) {
        self.state = v;
    }

    // .protobuf.payment.ExceptionQueue queue = 2;


    pub fn get_queue(&self) -> ExceptionQueue {
        self.queue
    }
    pub fn clear_queue(&mut self) {
        self.queue = ExceptionQueue::ExceptionQueue_NotSet;
    }

    // Param is passed by value, moved
    pub fn set_queue(&mut self, v: ExceptionQueue) {
        self.queue = v;
    }

    // string reason = 3;


    pub fn get_reason(&self) -> &str {
        &self.reason
    }
    pub fn clear_reason(&mut self) {
        self.reason.clear();
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::std::string::String) {
        self.reason = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::std::string::String {
        &mut self.reason
    }

    // Take field
    pub fn take_reason(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reason, ::std::string::String::new())
    }

    // string timestamp = 4;


    pub fn get_timestamp(&self) -> &str {
        &self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::std::string::String) {
        self.timestamp = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::std::string::String {
        &mut self.timestamp
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.timestamp, ::std::string::String::new())
    }

    // .protobuf.payment.Service service = 5;


    pub fn get_service(&self) -> Service {
        self.service
    }
    pub fn clear_service(&mut self) {
        self.service = Service::Service_NotSet;
    }

    // Param is passed by value, moved
    pub fn set_service(&mut self, v: Service) {
        self.service = v;
    }

    // repeated .protobuf.payment.PaymentException.AdditionalDataEntry additional_data = 6;


    pub fn get_additional_data(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.additional_data
    }
    pub fn clear_additional_data(&mut self) {
        self.additional_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_additional_data(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.additional_data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_additional_data(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.additional_data
    }

    // Take field
    pub fn take_additional_data(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.additional_data, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for PaymentException {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.queue, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reason)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.timestamp)?;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.service, 5, &mut self.unknown_fields)?
                },
                6 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.additional_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != ExceptionState::ExceptionState_NotSet {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        if self.queue != ExceptionQueue::ExceptionQueue_NotSet {
            my_size += ::protobuf::rt::enum_size(2, self.queue);
        }
        if !self.reason.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.reason);
        }
        if !self.timestamp.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.timestamp);
        }
        if self.service != Service::Service_NotSet {
            my_size += ::protobuf::rt::enum_size(5, self.service);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(6, &self.additional_data);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != ExceptionState::ExceptionState_NotSet {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        if self.queue != ExceptionQueue::ExceptionQueue_NotSet {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.queue))?;
        }
        if !self.reason.is_empty() {
            os.write_string(3, &self.reason)?;
        }
        if !self.timestamp.is_empty() {
            os.write_string(4, &self.timestamp)?;
        }
        if self.service != Service::Service_NotSet {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.service))?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(6, &self.additional_data, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PaymentException {
        PaymentException::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ExceptionState>>(
                "state",
                |m: &PaymentException| { &m.state },
                |m: &mut PaymentException| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ExceptionQueue>>(
                "queue",
                |m: &PaymentException| { &m.queue },
                |m: &mut PaymentException| { &mut m.queue },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reason",
                |m: &PaymentException| { &m.reason },
                |m: &mut PaymentException| { &mut m.reason },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "timestamp",
                |m: &PaymentException| { &m.timestamp },
                |m: &mut PaymentException| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Service>>(
                "service",
                |m: &PaymentException| { &m.service },
                |m: &mut PaymentException| { &mut m.service },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "additional_data",
                |m: &PaymentException| { &m.additional_data },
                |m: &mut PaymentException| { &mut m.additional_data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PaymentException>(
                "PaymentException",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PaymentException {
        static instance: ::protobuf::rt::LazyV2<PaymentException> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PaymentException::new)
    }
}

impl ::protobuf::Clear for PaymentException {
    fn clear(&mut self) {
        self.state = ExceptionState::ExceptionState_NotSet;
        self.queue = ExceptionQueue::ExceptionQueue_NotSet;
        self.reason.clear();
        self.timestamp.clear();
        self.service = Service::Service_NotSet;
        self.additional_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PaymentException {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentException {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Service {
    Service_NotSet = 0,
    PaymentNotificationReceiver = 1,
    PaymentAdmissions = 2,
    InboundSAPPaymentFlowController = 3,
    SAPPosting = 4,
    ReconciliationPosting = 5,
    AccountingPosting = 6,
    PaymentHistoryPosting = 7,
    MandateEnquiry = 8,
    ExceptionSink = 9,
}

impl ::protobuf::ProtobufEnum for Service {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Service> {
        match value {
            0 => ::std::option::Option::Some(Service::Service_NotSet),
            1 => ::std::option::Option::Some(Service::PaymentNotificationReceiver),
            2 => ::std::option::Option::Some(Service::PaymentAdmissions),
            3 => ::std::option::Option::Some(Service::InboundSAPPaymentFlowController),
            4 => ::std::option::Option::Some(Service::SAPPosting),
            5 => ::std::option::Option::Some(Service::ReconciliationPosting),
            6 => ::std::option::Option::Some(Service::AccountingPosting),
            7 => ::std::option::Option::Some(Service::PaymentHistoryPosting),
            8 => ::std::option::Option::Some(Service::MandateEnquiry),
            9 => ::std::option::Option::Some(Service::ExceptionSink),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Service] = &[
            Service::Service_NotSet,
            Service::PaymentNotificationReceiver,
            Service::PaymentAdmissions,
            Service::InboundSAPPaymentFlowController,
            Service::SAPPosting,
            Service::ReconciliationPosting,
            Service::AccountingPosting,
            Service::PaymentHistoryPosting,
            Service::MandateEnquiry,
            Service::ExceptionSink,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Service>("Service", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Service {
}

impl ::std::default::Default for Service {
    fn default() -> Self {
        Service::Service_NotSet
    }
}

impl ::protobuf::reflect::ProtobufValue for Service {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum PaymentStatus {
    PaymentStatus_NotSet = 0,
    Received = 1,
    SubmittedForPosting = 2,
    Posted = 3,
    FailedPosting = 4,
    ProcessingComplete = 5,
    PendingReturn = 6,
    PendingForwarding = 7,
    Exception = 8,
}

impl ::protobuf::ProtobufEnum for PaymentStatus {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PaymentStatus> {
        match value {
            0 => ::std::option::Option::Some(PaymentStatus::PaymentStatus_NotSet),
            1 => ::std::option::Option::Some(PaymentStatus::Received),
            2 => ::std::option::Option::Some(PaymentStatus::SubmittedForPosting),
            3 => ::std::option::Option::Some(PaymentStatus::Posted),
            4 => ::std::option::Option::Some(PaymentStatus::FailedPosting),
            5 => ::std::option::Option::Some(PaymentStatus::ProcessingComplete),
            6 => ::std::option::Option::Some(PaymentStatus::PendingReturn),
            7 => ::std::option::Option::Some(PaymentStatus::PendingForwarding),
            8 => ::std::option::Option::Some(PaymentStatus::Exception),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [PaymentStatus] = &[
            PaymentStatus::PaymentStatus_NotSet,
            PaymentStatus::Received,
            PaymentStatus::SubmittedForPosting,
            PaymentStatus::Posted,
            PaymentStatus::FailedPosting,
            PaymentStatus::ProcessingComplete,
            PaymentStatus::PendingReturn,
            PaymentStatus::PendingForwarding,
            PaymentStatus::Exception,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<PaymentStatus>("PaymentStatus", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for PaymentStatus {
}

impl ::std::default::Default for PaymentStatus {
    fn default() -> Self {
        PaymentStatus::PaymentStatus_NotSet
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum PaymentScheme {
    PaymentScheme_NotSet = 0,
    FasterPayments = 1,
}

impl ::protobuf::ProtobufEnum for PaymentScheme {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PaymentScheme> {
        match value {
            0 => ::std::option::Option::Some(PaymentScheme::PaymentScheme_NotSet),
            1 => ::std::option::Option::Some(PaymentScheme::FasterPayments),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [PaymentScheme] = &[
            PaymentScheme::PaymentScheme_NotSet,
            PaymentScheme::FasterPayments,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<PaymentScheme>("PaymentScheme", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for PaymentScheme {
}

impl ::std::default::Default for PaymentScheme {
    fn default() -> Self {
        PaymentScheme::PaymentScheme_NotSet
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentScheme {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum PaymentType {
    PaymentType_NotSet = 0,
    StandingOrder = 1,
    FutureDatedPayment = 2,
    ImmediatePayment = 3,
}

impl ::protobuf::ProtobufEnum for PaymentType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PaymentType> {
        match value {
            0 => ::std::option::Option::Some(PaymentType::PaymentType_NotSet),
            1 => ::std::option::Option::Some(PaymentType::StandingOrder),
            2 => ::std::option::Option::Some(PaymentType::FutureDatedPayment),
            3 => ::std::option::Option::Some(PaymentType::ImmediatePayment),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [PaymentType] = &[
            PaymentType::PaymentType_NotSet,
            PaymentType::StandingOrder,
            PaymentType::FutureDatedPayment,
            PaymentType::ImmediatePayment,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<PaymentType>("PaymentType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for PaymentType {
}

impl ::std::default::Default for PaymentType {
    fn default() -> Self {
        PaymentType::PaymentType_NotSet
    }
}

impl ::protobuf::reflect::ProtobufValue for PaymentType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ExceptionQueue {
    ExceptionQueue_NotSet = 0,
    EXCEPTION = 1,
}

impl ::protobuf::ProtobufEnum for ExceptionQueue {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ExceptionQueue> {
        match value {
            0 => ::std::option::Option::Some(ExceptionQueue::ExceptionQueue_NotSet),
            1 => ::std::option::Option::Some(ExceptionQueue::EXCEPTION),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ExceptionQueue] = &[
            ExceptionQueue::ExceptionQueue_NotSet,
            ExceptionQueue::EXCEPTION,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ExceptionQueue>("ExceptionQueue", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ExceptionQueue {
}

impl ::std::default::Default for ExceptionQueue {
    fn default() -> Self {
        ExceptionQueue::ExceptionQueue_NotSet
    }
}

impl ::protobuf::reflect::ProtobufValue for ExceptionQueue {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ExceptionState {
    ExceptionState_NotSet = 0,
    SignatureVerificationFailed = 1,
    MessageValidationFailed = 2,
    MessageCreationFailure = 3,
    SignatureFailure = 4,
    LedgerTechnicalFailure = 5,
    InvalidBusinessFailure = 6,
    ServiceRetriesExhausted = 7,
    ServiceErrorResponse = 8,
    DatabaseUnavailable = 9,
    LedgerUnavailable = 10,
    TopicFailure = 11,
    DecryptionFailure = 12,
    EncryptionFailure = 13,
    TokenFailure = 14,
    ServiceFailure = 15,
}

impl ::protobuf::ProtobufEnum for ExceptionState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ExceptionState> {
        match value {
            0 => ::std::option::Option::Some(ExceptionState::ExceptionState_NotSet),
            1 => ::std::option::Option::Some(ExceptionState::SignatureVerificationFailed),
            2 => ::std::option::Option::Some(ExceptionState::MessageValidationFailed),
            3 => ::std::option::Option::Some(ExceptionState::MessageCreationFailure),
            4 => ::std::option::Option::Some(ExceptionState::SignatureFailure),
            5 => ::std::option::Option::Some(ExceptionState::LedgerTechnicalFailure),
            6 => ::std::option::Option::Some(ExceptionState::InvalidBusinessFailure),
            7 => ::std::option::Option::Some(ExceptionState::ServiceRetriesExhausted),
            8 => ::std::option::Option::Some(ExceptionState::ServiceErrorResponse),
            9 => ::std::option::Option::Some(ExceptionState::DatabaseUnavailable),
            10 => ::std::option::Option::Some(ExceptionState::LedgerUnavailable),
            11 => ::std::option::Option::Some(ExceptionState::TopicFailure),
            12 => ::std::option::Option::Some(ExceptionState::DecryptionFailure),
            13 => ::std::option::Option::Some(ExceptionState::EncryptionFailure),
            14 => ::std::option::Option::Some(ExceptionState::TokenFailure),
            15 => ::std::option::Option::Some(ExceptionState::ServiceFailure),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ExceptionState] = &[
            ExceptionState::ExceptionState_NotSet,
            ExceptionState::SignatureVerificationFailed,
            ExceptionState::MessageValidationFailed,
            ExceptionState::MessageCreationFailure,
            ExceptionState::SignatureFailure,
            ExceptionState::LedgerTechnicalFailure,
            ExceptionState::InvalidBusinessFailure,
            ExceptionState::ServiceRetriesExhausted,
            ExceptionState::ServiceErrorResponse,
            ExceptionState::DatabaseUnavailable,
            ExceptionState::LedgerUnavailable,
            ExceptionState::TopicFailure,
            ExceptionState::DecryptionFailure,
            ExceptionState::EncryptionFailure,
            ExceptionState::TokenFailure,
            ExceptionState::ServiceFailure,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ExceptionState>("ExceptionState", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ExceptionState {
}

impl ::std::default::Default for ExceptionState {
    fn default() -> Self {
        ExceptionState::ExceptionState_NotSet
    }
}

impl ::protobuf::reflect::ProtobufValue for ExceptionState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dpayment_envelope_header.proto\x12\x10protobuf.payment\x1a\x20payme\
    nt_envelope_body_part.proto\"\xfb\x01\n\x06Header\x12<\n\nproperties\x18\
    \x01\x20\x01(\x0b2\x1c.protobuf.payment.PropertiesR\nproperties\x12;\n\n\
    signatures\x18\x02\x20\x03(\x0b2\x1b.protobuf.payment.SignatureR\nsignat\
    ures\x124\n\x05state\x18\x03\x20\x03(\x0b2\x1e.protobuf.payment.PaymentS\
    tateR\x05state\x12@\n\texception\x18\x04\x20\x01(\x0b2\".protobuf.paymen\
    t.PaymentExceptionR\texception\"\x88\x03\n\nProperties\x12\x1d\n\nmessag\
    e_id\x18\x01\x20\x01(\tR\tmessageId\x12!\n\x0cmessage_type\x18\x02\x20\
    \x01(\tR\x0bmessageType\x12\x1c\n\ttimestamp\x18\x03\x20\x01(\tR\ttimest\
    amp\x12F\n\x0epayment_status\x18\x04\x20\x01(\x0e2\x1f.protobuf.payment.\
    PaymentStatusR\rpaymentStatus\x12F\n\x0epayment_scheme\x18\x05\x20\x01(\
    \x0e2\x1f.protobuf.payment.PaymentSchemeR\rpaymentScheme\x12?\n\x0bpayme\
    ntType\x18\x06\x20\x01(\x0e2\x1d.protobuf.payment.PaymentTypeR\x0bpaymen\
    tType\x12.\n\x12paymentStatusCount\x18\x07\x20\x01(\x05R\x12paymentStatu\
    sCount\x12\x19\n\x08trace_id\x18\x08\x20\x01(\tR\x07traceId\"\xc9\x01\n\
    \tSignature\x129\n\npart_names\x18\x01\x20\x03(\x0e2\x1a.protobuf.paymen\
    t.PartNameR\tpartNames\x12\x1c\n\tsignature\x18\x02\x20\x01(\tR\tsignatu\
    re\x12/\n\x13signature_algorithm\x18\x03\x20\x01(\tR\x12signatureAlgorit\
    hm\x12\x15\n\x06key_id\x18\x04\x20\x01(\tR\x05keyId\x12\x1b\n\tkey_store\
    \x18\x05\x20\x01(\tR\x08keyStore\"\x9d\x01\n\x0cPaymentState\x12\x12\n\
    \x04name\x18\x01\x20\x01(\tR\x04name\x12?\n\x05value\x18\x02\x20\x03(\
    \x0b2).protobuf.payment.PaymentState.ValueEntryR\x05value\x1a8\n\nValueE\
    ntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\
    \x02\x20\x01(\tR\x05value:\x028\x01\"\x91\x03\n\x10PaymentException\x126\
    \n\x05state\x18\x01\x20\x01(\x0e2\x20.protobuf.payment.ExceptionStateR\
    \x05state\x126\n\x05queue\x18\x02\x20\x01(\x0e2\x20.protobuf.payment.Exc\
    eptionQueueR\x05queue\x12\x16\n\x06reason\x18\x03\x20\x01(\tR\x06reason\
    \x12\x1c\n\ttimestamp\x18\x04\x20\x01(\tR\ttimestamp\x123\n\x07service\
    \x18\x05\x20\x01(\x0e2\x19.protobuf.payment.ServiceR\x07service\x12_\n\
    \x0fadditional_data\x18\x06\x20\x03(\x0b26.protobuf.payment.PaymentExcep\
    tion.AdditionalDataEntryR\x0eadditionalData\x1aA\n\x13AdditionalDataEntr\
    y\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\
    \x20\x01(\tR\x05value:\x028\x01*\xfe\x01\n\x07Service\x12\x12\n\x0eServi\
    ce_NotSet\x10\0\x12\x1f\n\x1bPaymentNotificationReceiver\x10\x01\x12\x15\
    \n\x11PaymentAdmissions\x10\x02\x12#\n\x1fInboundSAPPaymentFlowControlle\
    r\x10\x03\x12\x0e\n\nSAPPosting\x10\x04\x12\x19\n\x15ReconciliationPosti\
    ng\x10\x05\x12\x15\n\x11AccountingPosting\x10\x06\x12\x19\n\x15PaymentHi\
    storyPosting\x10\x07\x12\x12\n\x0eMandateEnquiry\x10\x08\x12\x11\n\rExce\
    ptionSink\x10\t*\xc0\x01\n\rPaymentStatus\x12\x18\n\x14PaymentStatus_Not\
    Set\x10\0\x12\x0c\n\x08Received\x10\x01\x12\x17\n\x13SubmittedForPosting\
    \x10\x02\x12\n\n\x06Posted\x10\x03\x12\x11\n\rFailedPosting\x10\x04\x12\
    \x16\n\x12ProcessingComplete\x10\x05\x12\x11\n\rPendingReturn\x10\x06\
    \x12\x15\n\x11PendingForwarding\x10\x07\x12\r\n\tException\x10\x08*=\n\r\
    PaymentScheme\x12\x18\n\x14PaymentScheme_NotSet\x10\0\x12\x12\n\x0eFaste\
    rPayments\x10\x01*f\n\x0bPaymentType\x12\x16\n\x12PaymentType_NotSet\x10\
    \0\x12\x11\n\rStandingOrder\x10\x01\x12\x16\n\x12FutureDatedPayment\x10\
    \x02\x12\x14\n\x10ImmediatePayment\x10\x03*:\n\x0eExceptionQueue\x12\x19\
    \n\x15ExceptionQueue_NotSet\x10\0\x12\r\n\tEXCEPTION\x10\x01*\xa0\x03\n\
    \x0eExceptionState\x12\x19\n\x15ExceptionState_NotSet\x10\0\x12\x1f\n\
    \x1bSignatureVerificationFailed\x10\x01\x12\x1b\n\x17MessageValidationFa\
    iled\x10\x02\x12\x1a\n\x16MessageCreationFailure\x10\x03\x12\x14\n\x10Si\
    gnatureFailure\x10\x04\x12\x1a\n\x16LedgerTechnicalFailure\x10\x05\x12\
    \x1a\n\x16InvalidBusinessFailure\x10\x06\x12\x1b\n\x17ServiceRetriesExha\
    usted\x10\x07\x12\x18\n\x14ServiceErrorResponse\x10\x08\x12\x17\n\x13Dat\
    abaseUnavailable\x10\t\x12\x15\n\x11LedgerUnavailable\x10\n\x12\x10\n\
    \x0cTopicFailure\x10\x0b\x12\x15\n\x11DecryptionFailure\x10\x0c\x12\x15\
    \n\x11EncryptionFailure\x10\r\x12\x10\n\x0cTokenFailure\x10\x0e\x12\x12\
    \n\x0eServiceFailure\x10\x0fB@\n/uk.co.nationwide.payments.schema.paymen\
    t.headerB\rPaymentHeaderb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
